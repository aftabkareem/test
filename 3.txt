% Clear workspace and close all figures
clear; close all;

% Problem definition
nPoints = 10;                    % Number of spatial points
Pe = 7;                          % Peclet number
diffCoeff = 1;                   % Diffusion coefficient
domainLength = 1;                % Length of the domain
nElements = nPoints - 1;         % Number of elements
elemLength = domainLength / nElements; % Length of each element
velocity = 2 * Pe * diffCoeff / domainLength; % Flow velocity

% Spatial discretization
xVec = linspace(0, domainLength, nPoints);
dx = xVec(2) - xVec(1);

% Analytical solution calculation
xFine = 0:0.01:1;
phiAnalytical = (exp(velocity * xFine / diffCoeff) - exp(velocity)) / (1 - exp(velocity));
plot(xFine, phiAnalytical, 'k', 'LineWidth', 1.2);
hold on;
grid on;

% Define the weighting factors for the Petrov-Galerkin method
weightFactors = [0, 1, 1 - (1 / abs(Pe)), 1 - (1 / abs(Pe)) - 0.5, 1 - (1 / abs(Pe)) + 3, coth(abs(Pe)) - (1 / abs(Pe))];

% Construct the global matrices
globalStiffness = zeros(nPoints, nPoints);
globalMass = zeros(nPoints, nPoints);
globalExtraDiffusion = zeros(nPoints, nPoints);

for i = 1:nElements
    % Calculate elemental matrices
    elemStiffness = (velocity / elemLength) * [1, -1; -1, 1];
    elemDiffusion = (diffCoeff / elemLength) * [1, -1; -1, 1];

    % Loop over weighting factors to build extra diffusion matrix
    for w = 1:length(weightFactors)
        globalExtraDiffusion(i:i+1, i:i+1) = globalExtraDiffusion(i:i+1, i:i+1) + ...
            weightFactors(w) * (velocity / elemLength) * [1, -1; -1, 1];
    end
    
    % Assemble global matrices
    globalStiffness(i:i+1, i:i+1) = globalStiffness(i:i+1, i:i+1) + elemStiffness;
    globalMass(i:i+1, i:i+1) = globalMass(i:i+1, i:i+1) + elemDiffusion;
end

% Combine global matrices
globalMatrix = globalStiffness + globalMass + globalExtraDiffusion;

% Apply boundary conditions (Dirichlet at both ends)
globalMatrix(1, :) = 0; globalMatrix(1, 1) = 1; globalMatrix(end, :) = 0; globalMatrix(end, end) = 1;
b = zeros(nPoints, 1); b(1) = 1; % Inlet boundary condition

% Solve the linear system of equations
phi = globalMatrix \ b;

% Visualization
timeArray = linspace(0, domainLength, nPoints);
plot(timeArray, phi, 'bo-', 'LineWidth', 0.8, 'MarkerSize', 10);
legend('Analytical Solution', 'Petrov-Galerkin a = 1', 'a < alpha critical', 'a = alpha optimal', 'Location', 'northwest');
xlabel('Domain Length (x)');
ylabel('Scalar Quantity (\phi)');
title(sprintf('Convection Diffusion for Peclet number(Pe) = %d', Pe), 'FontSize', 12, 'FontWeight', 'normal', 'Color', 'black');

% End of script
