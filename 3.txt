% Clear all figures and variables
clear variables; 
close all;

% Define simulation parameters
totalPoints = 10;
PecletNumber = 7000;
diffusivity = 1;
domainLength = 1;

% Compute mesh properties
numberOfElements = totalPoints - 1;
elementLength = domainLength / numberOfElements;
flowVelocity = (2 * PecletNumber * diffusivity) / domainLength;

% Generate spatial domain
spatialDomain = linspace(0, domainLength, totalPoints);

% Petrov-Galerkin stabilization parameters
stabilizationParams = [0, 1, 1-(1/abs(PecletNumber)), ...
                       (1-(1/abs(PecletNumber)))-0.5, ...
                       (1-(1/abs(PecletNumber)))+3, ...
                       coth(abs(PecletNumber))-1/abs(PecletNumber)];

% Initialize global matrices
globalConvection = zeros(totalPoints);
globalDiffusion = zeros(totalPoints);
globalStabilization = zeros(totalPoints);

% Assemble matrices
for elemIndex = 1:numberOfElements
    % Define local matrices for convection and diffusion
    localConvection = (flowVelocity / 2) * [1, -1; -1, 1];
    localDiffusion = (diffusivity / elementLength) * [1, -1; -1, 1];
    
    % Loop through each stabilization parameter
    for stabParam = stabilizationParams
        % Calculate local stabilization matrix
        localStabilization = (stabParam * flowVelocity / 2) * [1, -1; -1, 1];
        
        % Assign to global stabilization matrix
        globalStabilization(elemIndex:elemIndex+1, elemIndex:elemIndex+1) = ...
            globalStabilization(elemIndex:elemIndex+1, elemIndex:elemIndex+1) + localStabilization;
    end
    
    % Assemble global convection and diffusion matrices
    nodes = [elemIndex, elemIndex + 1];
    globalConvection(nodes, nodes) = globalConvection(nodes, nodes) + localConvection;
    globalDiffusion(nodes, nodes) = globalDiffusion(nodes, nodes) + localDiffusion;
end

% Combine global matrices
globalMatrix = globalConvection + globalDiffusion + globalStabilization;

% Apply boundary conditions (Dirichlet)
globalMatrix(1, :) = 0; globalMatrix(1, 1) = 1;
globalMatrix(end, :) = 0; globalMatrix(end, end) = 1;
sourceTerm = zeros(totalPoints, 1);
sourceTerm(1) = 1; % Inlet boundary condition

% Solve the system of linear equations
phiSolution = globalMatrix \ sourceTerm;

% Plotting the numerical solution
plot(spatialDomain, phiSolution, 'o-', 'LineWidth', 2);
title(['Convection-Diffusion for Peclet Number Pe = ' num2str(PecletNumber)]);
xlabel('Domain Length (x)');
ylabel('Scalar Quantity (\phi)');
grid on;
