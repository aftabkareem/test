% MATLAB Code for 1D Convection-Diffusion using Petrov-Galerkin Method
clear all;
close all;

% Parameters
numpoint = 10;   % Number of points
Pe = 0;          % Peclet number
u = 0;           % Velocity
difcoef = 5;     % Diffusion coefficient
L = 1;           % Domain length
alpha = -1;      % Upwinding factor (negative for upwinding)

% Mesh generation
x = linspace(0, L, numpoint);
h = x(2) - x(1);

% Shape functions and their derivatives
N = @(xi) [(1 - xi) / 2, (1 + xi) / 2];
dNdxi = [-1/2, 1/2];

% Assemble global stiffness matrix and load vector
K_global = zeros(numpoint, numpoint);
F_global = zeros(numpoint, 1);

% Gauss point for integration
gauss_point = 0; 
weight = 2; 

% Assembly process
for element = 1:numpoint-1
    local_K = zeros(2,2);
    local_M = zeros(2,2);
    
    % Integration using Gauss quadrature
    xi = gauss_point;
    N_val = N(xi);
    dN_dxi_val = dNdxi;
    
    % Jacobian of the transformation from reference element to physical element
    J = h/2;
    dN_dx = dN_dxi_val / J;
    
    % Compute element stiffness matrix
    local_K = local_K + (u * N_val' * dN_dx + difcoef * dN_dx' * dN_dx) * weight * J;
    
    % Petrov-Galerkin weighting
    dN_dx_mod = dN_dx + alpha * abs(u) / (2 * difcoef) * dN_dx;
    local_M = local_M + (u * N_val' * dN_dx_mod) * weight * J;
    
    % Add local contribution to global matrix
    K_global(element:element+1, element:element+1) = ...
        K_global(element:element+1, element:element+1) + local_K + local_M;
end

% Apply boundary conditions
K_global(1, :) = 0; K_global(1, 1) = 1; F_global(1) = 1; % Dirichlet BC at x=0
K_global(end, :) = 0; K_global(end, end) = 1; F_global(end) = 0; % Dirichlet BC at x=L

% Solve the linear system
phi = K_global \ F_global;

% Post-processing: plot the results
plot(x, phi, 'o-', 'LineWidth', 2);
title('Convection-Diffusion Equation for Peclet number(Pe)=',num2str(Pe));
xlabel('Domain (x)');
ylabel('Scalar Variable (\phi)');
grid on;
















clear all;
close all;

% Problem setup
Pe = 7;                % Peclet number
num_nodes = 10;        % Number of nodes
L = 1;                 % Length of the domain
diff_coeff = 1;        % Diffusion coefficient
velocity = 2 * Pe * diff_coeff / L; % Velocity

% Discretize the domain
x = linspace(0, L, num_nodes);
h = x(2) - x(1);       % Element size

% Initialize global matrices
A = zeros(num_nodes);  % Global stiffness matrix
b = zeros(num_nodes, 1); % Global load vector

% Shape functions for linear elements
N1 = @(xi) 1 - xi;
N2 = @(xi) xi;

% Element stiffness matrix and load vector assembly
for i = 1:num_nodes-1
    % Local to global mapping
    nodes = [i, i+1];
    
    % Evaluate element stiffness matrix
    Ke = (velocity/h) * [1 -1; -1 1] + ...
         (diff_coeff/h) * [1 -1; -1 1];  % Convection and diffusion
    
    % Petrov-Galerkin stabilization term
    Wa = h * velocity / (2 * diff_coeff);  % Weighting function for the upwind
    Kpg = Wa * (1/Pe) * (velocity/h) * [1 -1; -1 1];  % Additional diffusion
    
    % Add to global matrix
    A(nodes,nodes) = A(nodes,nodes) + Ke + Kpg;
end

% Apply boundary conditions (e.g., Dirichlet)
A(1,:) = 0; A(1,1) = 1; b(1) = 1; % Left boundary
A(end,:) = 0; A(end,end) = 1; b(end) = 0; % Right boundary

% Solve system of equations
phi = A \ b;

% Plot results
plot(x, phi, '-o');
title('Solution of the steady-state convection-diffusion equation');
xlabel('Domain Length');
ylabel('Scalar variable (\phi)');

