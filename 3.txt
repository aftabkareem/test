% Refresh the environment and close figures
clearvars;
close all;

% Define the simulation settings
numPts = 10;
PeValue = 7000;
diffCoeff = 1;
domainSize = 1;

% Mesh calculations
numElems = numPts - 1;
dx = domainSize / numElems;
advVelocity = (2 * PeValue * diffCoeff) / domainSize;

% Space discretization
xNodes = linspace(0, domainSize, numPts);

% Calculation of stabilization factors for Petrov-Galerkin approach
tauValues = [0, 1, 1 - (1 / abs(PeValue)), ...
             1 - (1 / abs(PeValue)) - 0.5, ...
             1 - (1 / abs(PeValue)) + 3, ...
             coth(abs(PeValue)) - (1 / abs(PeValue))];

% Assembly of the global system
globalA = zeros(numPts, numPts);
globalB = zeros(numPts, 1);

% Assembly loop for each element
for elem = 1:numElems
    % Local matrices for each term
    convectionMatrix = (advVelocity / 2) * [1, -1; -1, 1];
    diffusionMatrix = (diffCoeff / dx) * [1, -1; -1, 1];
    
    % Aggregate extra diffusion contributions for stability
    for tau = tauValues
        stabilizationMatrix = (tau * advVelocity / 2) * [1, -1; -1, 1];
        globalA(elem:elem+1, elem:elem+1) = globalA(elem:elem+1, elem:elem+1) + stabilizationMatrix;
    end
    
    % Update global matrices
    globalA(elem:elem+1, elem:elem+1) = globalA(elem:elem+1, elem:elem+1) + ...
                                         convectionMatrix + diffusionMatrix;
end

% Define boundary conditions
globalA(1, :) = 0; globalA(1, 1) = 1; globalB(1) = 1; % Dirichlet at x=0
globalA(end, :) = 0; globalA(end, end) = 1; % Dirichlet at x=L

% Compute the solution
phiNumerical = globalA \ globalB;

% Plot results
figure;
plot(xNodes, phiNumerical, 's-', 'LineWidth', 1.5, 'MarkerSize', 7);
title(sprintf('Peclet Number Pe = %d: Convection-Diffusion Solution', PeValue));
xlabel('Position along domain (x)');
ylabel('Distributed scalar (\phi)');
axis tight;
grid on;
