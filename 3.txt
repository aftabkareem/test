close all

% Number of points
numpoint = 10;
%..........Velocity
Pe = 7000;
% Diffusion coefficient
diffcoef = 1;
% Domain length
lengthdom = 1;
% element number
numelem = numpoint - 1;
% element length
elelength = lengthdom/numelem;
% Calculation of velocity
Velocity = (2*Pe*diffcoef)/lengthdom;

timearray = 0:elelength:lengthdom;
x=0:0.01:1;

% Standard galerkin method
%a0 = 0; % tau = 0
% Petrov galerkin method
a0=0;
a1 = 1;
a2 = 1-(1/abs(Pe)); % alpha smaller than alpha critical
a3=a2-0.5;
a4=a2+3;
a5=coth(abs(Pe))-1/abs(Pe);

alpha = [a0 a1 a2 a3 a4];
%alpha = [a1 a2 a3 a4 ]; % tau alpha = [alpha]
for a1=1:length(alpha)
    % Node connectivity
    lpoints = zeros(numelem,2);
    for i=1:(numelem)
        lpoints(i,1) = i;
        lpoints(i,2) = i+1;
    end
    % Connection matrix
    Convmat = zeros(numpoint,numpoint);

% Diffusion matrix
Diffmat = zeros(numpoint,numpoint);
% Extra diffusion matrix for petrov galerkin methods
extraDiff = zeros(numpoint,numpoint);
for i = 1:numelem
    % current element convection matrix
    currentelem = Velocity/2 *[1 -1; -1 1];
    % current element diffusion matrix
    currentdiff = diffcoef/elelength * [1 -1; -1 1];
    % current element extra diffusion matrix
    currentextradiff= Velocity * alpha(a1)/2  * [1 -1; -1 1];
    
    % global nodes of element
    points = lpoints(i,:);
    % Matrix
    Convmat(points,points) = Convmat(points,points)+currentelem;
    Diffmat(points,points) = Diffmat(points,points)+currentdiff;
   extraDiff(points,points) = extraDiff(points,points)+currentextradiff;
end
phi = zeros(numpoint,1);
% Boundary Condition
phi(1)=1; % boundary condition at entry phi = 1 at inlet
phi(end)=0; % boundary condition at exit phi = 0 at outlet
% Matrix created:
A = Convmat+Diffmat+extraDiff;
A_red=A(2:numpoint-1,2:numpoint-1);


% Code continued on the next cell

% continued from previous cell
% Red = A(2:numpoint-1,2:numpoint-1);
rhs_red = phi(2:numpoint-1);
rhs_red(1)=rhs_red(1)-A(2,1);

% Reduced system
newphi=inv(A_red)*rhs_red;
phi(2:numpoint-1)=newphi;
% Plot
plot(timearray,phi);
end

xlabel('Domain Length (x)')
ylabel('Scalar Quantity (\phi)')
title(['Convection Diffusion for Peclet number(Pe) = ',num2str(Pe)]);
grid
